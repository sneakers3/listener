/*******************************************************************************
* This file was generated by Tizen Web UI Builder.
* User should hand edit this file.
********************************************************************************/

var editPopup;
var listTimerMap = {};

function getHoldHandler(sound) {
	return function (event) {
		console.log('sound item taphold', sound);
		$('#soundDialogID').val(sound.id);
		$('#soundDialogTitleInput').val(sound.title);
		$('#soundDialog').popup('open');
	};
}
function getOnOffHandler(sound) {
	return function (event) {
		console.log('onoff ', sound.id, event);
		changeSound(sound.id, {enabled: event.target.checked});
	};
}
function getNotiOnOffHandler(sound) {
	return function (event) {
		console.log('noti onoff', sound.id, event, $(event.target).val());
		changeSound(sound.id, {notiEnabled: $(event.target).val() === 'on'});
	}
}
function updateSoundList() {
	var soundListView = $('#soundListView');
	soundListView.children().remove();
	for (var i in listenerApp.sounds) {
		var sound = listenerApp.sounds[i];
		console.log('add sound:', sound);
		var showIcon = listenerApp.settings.showSoundIcons;
		var li = $('<li class="ui-li-has-checkbox">' + 
				'<input type="checkbox" name="onoff"/>' +
				(showIcon ? '<img src="../res/thumbnail.jpg" class="ui-li-bigicon">' : '') +
				'<span class="ui-li-text-main"></span>' + 
				'<select data-role="slider">' + 
					'<option value="off"></option>' + 
					'<option value="on"></option>' + 
				'</select>' + 
				'</li>');

		li.children('.ui-li-text-main').text(sound.title);
		li.attr('sound-id', sound.id);
		li.on("taphold", getHoldHandler(sound));
		soundListView.append(li).listview('refresh');
		li.children('input[name=onoff]').
			attr('checked', sound.enabled).
			on('change', getOnOffHandler(sound)).
			checkboxradio();
		li.children('select').
			val(sound.notiEnabled ? 'on' : 'off').
			on('change', getNotiOnOffHandler(sound)).
			slider();
	}
}

function getSoundItemFromID(soundID) {
	return $('#soundListView li[sound-id=' + soundID +']')[0];
}
function listMatchHandler(event, soundID) {
	console.log('list matchHandler', soundID);	
	blink(getSoundItemFromID(soundID));
}

/**
 * @param {Object} event
 * @base _list_page
 * @returns {Boolean}
*/
_list_page.prototype.startButton_ontap = function(event) {
	pageManager.changePage('history', {transition: 'fade'});
};

/**
 * @param {Object} event
 * @base _list_page
 * @returns {Boolean}
*/
_list_page.prototype.newSoundButton_ontap = function(event) {
	pageManager.changePage('newsound', {transition: 'fade'});
};

/**
 * @param {Object} event
 * @base _list_page
 * @returns {Boolean}
*/
_list_page.prototype.settingsButton_ontap = function(event) {
	pageManager.changePage('settings', {transition: 'fade'});
};

/**
 * @param {Object} event
 * @base _list_page
 * @returns {Boolean}
*/
_list_page.prototype.soundListView_ontap = function(event) {
	console.log('soundListView tap');
};

/**
 * @param {Object} event
 * @base _list_page
 * @returns {Boolean}
*/
_list_page.prototype.onpageinit = function(event) {
	$('#soundDialogOKButton').on('click', function () {
		console.log('soundDialogOkButton click');
		var soundID = parseInt($('#soundDialogID').val(), 10);
		var newTitle = $('#soundDialogTitleInput').val();
		var result = changeSound(soundID, {title: newTitle});
		if (result) {
			updateSoundList();
		}
	});
	$('#soundDialogDeleteButton').on('click', function () {
		console.log('soundDialogOkButton click');
		var soundID = parseInt($('#soundDialogID').val(), 10);
		var result = deleteSound(soundID);
		if (result) {
			updateSoundList();
		}
	});
};

/**
 * @param {Object} event
 * @base _list_page
 * @returns {Boolean}
*/
_list_page.prototype.onpagebeforeshow = function(event) {
	updateSoundList();
	console.log('list on matchHandler');
	listenerApp.on('soundMatched', listMatchHandler);
};

/**
 * @param {Object} event
 * @base _list_page
 * @returns {Boolean}
*/
_list_page.prototype.onpagebeforehide = function(event) {
	console.log('list off matchHandler');
	listenerApp.off('soundMatched', listMatchHandler);
};

/**
 * @param {Object} event
 * @base _list_page
 * @returns {Boolean}
*/
_list_page.prototype.unbinded_function = function(event) {
	
};

/**
 * @param {Object} event
 * @base _list_page
 * @returns {Boolean}
*/
_list_page.prototype.onupdatelayout = function(event) {
	
};

